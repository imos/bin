#!/bin/bash
# imos-archive archives/dearchives files.
#
# Usage:
#     imos-crypt [options] [input output] ...

source "$(dirname "${BASH_SOURCE}")"/imos-variables || exit 1
DEFINE_int file_size 0 'Maximum size of a generated archive in bytes.'
DEFINE_bool pass_working_directory false \
    "Pass a caller's working directory to the program." \
    "Otherwise, a callee's working directory is under the package."
DEFINE_string output '' 'Path to output the archive to.'
DEFINE_string command '' 'Command to run.'
DEFINE_bool extra_arguments true 'Append extra arguments.'
eval "${IMOSH_INIT}"

create_tar() {
  if [ "$#" -eq 1 ]; then
    local package_directory="${TMPDIR}/package"
    mkdir -p "${package_directory}"
    ln -s "$(pwd)" "${package_directory}/bin"
    if [ "${FLAGS_command}" != '' ]; then
      local command_file="${package_directory}/COMMAND"
      {
        sub::println '#!/bin/bash'
        if (( ! FLAGS_pass_working_directory )); then
          sub::println 'cd "$(dirname "${BASH_SOURCE}")/bin"'
        fi
        if (( FLAGS_extra_arguments )); then
          sub::println "${FLAGS_command} \"\$@\""
        else
          sub::println "${FLAGS_command}"
        fi
      } > "${command_file}"
      chmod +x "${command_file}"
    fi
    pushd "${package_directory}" >/dev/null
    local line=''
    local tar_out="${TMPDIR}/tar_out"
    local tar_log="${TMPDIR}/tar_log"
    mkfifo "${tar_out}" "${tar_log}"
    tar zcvfh - * >"${tar_out}" 2>"${tar_log}" &
    local tar_pid="$!"
    while IFS= read -r line; do
      LOG INFO "Archiving: ${line}"
    done <"${tar_log}" &
    local log_pid="$!"
    if (( FLAGS_file_size <= 0 )); then
      cat <"${tar_out}" >"${1}"
    else
      head -c "$(( FLAGS_file_size + 1 ))" <"${tar_out}" > "${1}"
      kill "${log_pid}" 2>/dev/null || true
      kill "${tar_pid}" 2>/dev/null || true
      local file_size="$(wc -c < "${1}")"
      if (( file_size > FLAGS_file_size )); then
        LOG FATAL "File size is too big: --file_size=${FLAGS_file_size}"
      fi
    fi
    popd >/dev/null
  else
    eval "${IMOSH_WRONG_NUMBER_OF_ARGUMENTS}"
  fi
}

archive_tar() {
  if [ "$#" -eq 2 ]; then
    local command='#!/bin/bash
set -e -u
package_directory="${TMPDIR}/package.${RANDOM}.${RANDOM}.${RANDOM}.${RANDOM}.${RANDOM}/package"
mkdir -p "${package_directory}"
cat "${BASH_SOURCE}" | tail -n +NUM_OF_LINES | {
  pushd "${package_directory}" >/dev/null
  tar zxvf - >/dev/null 2>/dev/null
  popd >/dev/null
}
"${package_directory}/COMMAND" "$@"
exit 0
'
    local command_lines=()
    func::explode command_lines $'\n' "${command}"
    func::str_replace command 'NUM_OF_LINES' "${#command_lines[*]}"
    {
      sub::print "${command}"
      cat "${1}"
    } > "${2}"
    chmod +x "${2}"
  else
    eval "${IMOSH_WRONG_NUMBER_OF_ARGUMENTS}"
  fi
}

main() {
  if [ "${FLAGS_output}" = '' ]; then
    LOG FATAL '--output flag msut be specified.'
  fi
  if [ "${FLAGS_command}" = '' ]; then
    LOG FATAL '--command flag must be specified.'
  fi
  local tar_file="${TMPDIR}/package.tar"
  local sar_file="${TMPDIR}/package.sar"
  create_tar "${tar_file}"
  archive_tar "${tar_file}" "${sar_file}"
  cp "${sar_file}" "${FLAGS_output}"
}

main "$@"
