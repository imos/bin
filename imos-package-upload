#!/bin/bash
# imos-package-upload uploads files to package.imoz.jp.
#
# Usage:
#   imos-package-upload file...

source "$(dirname "${BASH_SOURCE}")"/imos-variables || exit 1
DEFINE_string alias '' 'Alias name of the package.'
DEFINE_int fragment_size "$(( 1024 * 1024 ))" 'Limit of fragment size.'
DEFINE_string bucket 'imos-package' 'Bucket name.'
DEFINE_string host 's3-ap-northeast-1.amazonaws.com' 'Host name.'
DEFINE_int threads 64 'The number of threads to upload with.'
if ! sub::isset IMOSH_TESTING; then
  eval "${IMOSH_INIT}"
fi

rfc2date() {
  if [ "$#" -eq 1 ]; then
    case "${UNAME}" in
      'Linux')
        LC_ALL=en_US.UTF-8 TZ=GMT date --date="${1}" +'%Y-%m-%d';;
      *)
        LC_ALL=en_US.UTF-8 TZ=GMT \
            date -j -f '%a, %d %b %Y %H:%M:%S %Z' "${1}" +'%Y-%m-%d';;
    esac
  else
    eval "${IMOSH_WRONG_NUMBER_OF_ARGUMENTS}"
  fi
}

mdate() {
  if [ "$#" -eq 1 ]; then
    local mtime="$(
        curl --silent --fail --head \
            "https://${FLAGS_host}/${FLAGS_bucket}/${1}" | \
            grep -i last-modified | cut -d: -f2-)"
    func::trim mtime
    if [ "${mtime}" != '' ]; then
      rfc2date "${mtime}"
    fi
  else
    eval "${IMOSH_WRONG_NUMBER_OF_ARGUMENTS}"
  fi
}

# For testing.  This function will be overridden in tests.
create_working_directory() {
  if [ "$#" -eq 1 ]; then
    func::tmpfile "${1}"
  else
    eval "${IMOSH_WRONG_NUMBER_OF_ARGUMENTS}"
  fi
}

touch_object() {
  if [ "$#" -eq 1 ]; then
    imos-aws s3api copy-object \
        --bucket "${FLAGS_bucket}" \
        --key "${1}" \
        --copy-source "${FLAGS_bucket}/${1}" \
        --metadata-directive REPLACE \
        >'/dev/null' 2>'/dev/null' || return "$?"
  else
    eval "${IMOSH_WRONG_NUMBER_OF_ARGUMENTS}"
  fi
}

upload() {
  if [ "$#" -eq 2 ]; then
    CHECK [ -f "${2}" ]
    local mdate="$(mdate "ephemeral/${1}")"
    local today="$(date +'%Y-%m-%d')"
    if [ "${mdate}" = "${today}" ]; then
      LOG INFO "${1} is up-to-date."
    elif [ "${mdate}" != '' ]; then
      LOG INFO "Touching ${1}..."
      touch_object "ephemeral/${1}"
    else
      LOG INFO "Uploading ${1}..."
      imos-aws s3api put-object \
          --bucket "${FLAGS_bucket}" \
          --key "ephemeral/${1}" \
          --content-md5 "$(sub::print "${1}" | stream::hex2bin | base64)" \
          --body "${2}" \
          >'/dev/null'
    fi
  else
    eval "${IMOSH_WRONG_NUMBER_OF_ARGUMENTS}"
  fi
}

package::split() {
  local fragments_directory=''
  create_working_directory fragments_directory
  mkdir "${fragments_directory}"
  LOG INFO "Fragments directory: ${fragments_directory}"
  if [ -s "${1}" ]; then
    split -a 3 -b "${FLAGS_fragment_size}" "${1}" "${fragments_directory}/"
  else
    touch "${fragments_directory}/empty"
  fi
  if ! imos-aws-credentials >'/dev/null'; then
    LOG FATAL 'Failed to get AWS credentials.'
  fi
  local list_file="${fragments_directory}/list"
  local file=''
  local files=()
  for file in "${fragments_directory}/"*; do
    local md5="$(cat "${file}" | stream::md5)"
    LOG INFO "Fragment: ${md5}"
    if [ -f "${fragments_directory}/${md5}" ]; then
      rm "${file}"
    else
      mv "${file}" "${fragments_directory}/${md5}"
      files+=("${md5}")
    fi
    sub::println "${md5}" >> "${list_file}"
  done
  for md5 in "${files[@]}"; do
    sub::throttle "${FLAGS_threads}"
    upload "${md5}" "${fragments_directory}/${md5}" &
  done
  local md5="$(cat "${list_file}" | stream::md5)"
  mv "${list_file}" "${fragments_directory}/${md5}"
  list_file="${fragments_directory}/${md5}"
  LOG INFO "$(ls -lA "${fragments_directory}/")"
  LOG INFO "List file: ${md5}"
  upload "${md5}" "${list_file}"
  wait
}

main() {
  local file=''
  for file in "$@"; do
    package::split "${file}"
  done
}

if ! sub::isset IMOSH_TESTING; then
  main "$@"
fi
