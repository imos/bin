#!/bin/bash
# imofs is a command-line tool to backup/restore files and services.
#
# This command is useful especially for programming contests giving an disk
# image, and imofs backs up the initial state and restores almost everything.
# Directories to backup/restore are specified as TARGETS, and services to
# backup/restore are specified as SERVICES.
#
# Usage:
#     imofs [options] command
#
# Command:
#   - restore
#       Restore files and services.
#   - backup
#       Backup files and services.
#
# Configurations:
#   - /backup/imofs/services
#       Services to backup/restore.  This file is updated when you call
#       backup command.
#   - /backup/imofs/targets
#       Directories to backup/restore.  A directory should not end with "/".

source "$(dirname "${BASH_SOURCE}")"/imosh || exit 1
DEFINE_string target_directory '' 'Directory to backup/restore.'
DEFINE_string backup_directory '/backup' 'Directory to store backups.'
DEFINE_bool dry_run --alias=n false 'Show what will be copied.'
eval "${IMOSH_INIT}"

# Top directories to backup.
TARGETS=(bin etc home lib lib64 local opt root sbin usr var)
# Services to stop before operating.
SERVICES=(mysqld)

stop_services() {
  for service in "${SERVICES[@]}" \
      $(cat "${FLAGS_backup_directory}/imofs/services"); do
    if service "${service}" status >/dev/null 2>/dev/null; then
      ACTIVE_SERVICES+=("${service}")
      echo "Stopping ${service}..." >&2
      service "${service}" stop
    fi
  done
}

restart_services() {
  local services=()
  if [ "${#ACTIVE_SERVICES[*]}" -ne 0 ]; then
    services+=("${ACTIVE_SERVICES[@]}")
  fi
  services+=($(cat "${FLAGS_backup_directory}/imofs/services"))
  for service in "${services[@]}"; do
    if ! service "${service}" status >/dev/null 2>/dev/null; then
      echo "Starting ${service}..." >&2
      service "${service}" start
    fi
  done
}

call_rsync() {
  local rsync_options=(-av --delete)
  if (( FLAGS_dry_run )); then
    rsync_options+=(--dry-run)
  fi
  rsync "${rsync_options[@]}" "$@"
}

imofs::restore() {
  if [ ! -d "${FLAGS_backup_directory}" ]; then
    echo 'There is no backup.' >&2
    exit
  fi
  stop_services
  for target in "${TARGETS[@]}"; do
    if [ -d "${FLAGS_backup_directory}/${target}/" ]; then
      call_rsync "${FLAGS_backup_directory}/${target}/" \
                 "${FLAGS_target_directory}/${target}/"
    fi
  done
  restart_services
}

imofs::backup() {
  mkdir -p "${FLAGS_backup_directory}/imofs"
  echo 'Backing up services...' >&2
  if (( ! FLAGS_dry_run )); then
    for service in "${SERVICES[@]}"; do
      if service "${service}" status >/dev/null 2>/dev/null; then
        echo "${service}" >> "${FLAGS_backup_directory}/imofs/services"
      fi
    done
    sort "${FLAGS_backup_directory}/imofs/services" | \
        uniq > "${FLAGS_backup_directory}/imofs/services.tmp"
    cat "${FLAGS_backup_directory}/imofs/services.tmp" \
        > "${FLAGS_backup_directory}/imofs/services"
    rm "${FLAGS_backup_directory}/imofs/services.tmp"
  fi
  stop_services
  for target in "${TARGETS[@]}"; do
    if [ -d "${FLAGS_target_directory}/${target}" ]; then
      call_rsync "${FLAGS_target_directory}/${target}/" \
                 "${FLAGS_backup_directory}/${target}/"
    fi
  done
  restart_services
}

main() {
  local command="$1"; shift

  if [ -f "${FLAGS_backup_directory}/imofs/targets" ]; then
    TARGETS+=($(cat "${FLAGS_backup_directory}/imofs/targets"))
  fi
  if type "imofs::${command}" >/dev/null 2>/dev/null; then
    "imofs::${command}"
  else
    echo "No such command: ${command}" >&2
    exit 1
  fi
}

# Initialize variables.
ACTIVE_SERVICES=()
if [ "$#" -eq 1 ] ; then
  if [ "$(whoami)" != 'root' ]; then
    LOG FATAL 'root privilege is required.'
  fi
  main "$1"
else
  func::exit 'Command is required.'
fi
