#!/bin/bash
# Usage:
#     imos-install

source "$(dirname "${BASH_SOURCE}")"/imos-variables || exit 1
eval "${IMOSH_INIT}"

POKEMON="$(imos-pokemon --nocache)"

check() {
  if [ "$(whoami)" != 'root' ]; then
    LOG FATAL 'root privilege is required'
  fi
}

backup_and_move() {
  if [ "${#}" -eq 2 ]; then
    local source="${1}"
    local destination="${2}"
    LOG INFO "Moving ${source} to ${destination}..."
    if [ -L "${source}" ]; then
      if [ "$(readlink "${source}")" != "${destination}" ]; then
        rm "${source}"
        ln -s "${destination}" "${source}"
      else
        LOG INFO 'There is nothing to do.'
      fi
    else
      if [ -a "${source}" ]; then
        if [ -a "${destination}" ]; then
          mv "${destination}" "${destination}.$(date '+%Y%m%d-%H%M%S')"
        fi
        mkdir -p "$(dirname "${destination}")"
        mv "${source}" "${destination}"
      fi
      ln -s "${destination}" "${source}" || LOG ERROR \
          "Failed to create a symbolic link: ${source} to ${destination}."
    fi
  else
    LOG FATAL "Wrong number of arguments."
  fi
}

register_launchdaemons() {
  local daemons_directory="${IMOS_ROOT}/Library/LaunchDaemons"
  if [ ! -d "${daemons_directory}" ]; then
    LOG ERROR "LaunchDaemons directory is not found: ${daemons_directory}"
    return
  fi
  # Unregister imoz jobs first.
  local job=''
  while read -r -d$'\n' job; do
    LOG INFO "Unregistering an imoz job: ${job}"
    launchctl remove "${job}"
  done < <(launchctl list | cut -d$'\t' -f 3 | grep '^jp.imoz.')
  # Install launch daemons.
  pushd "$(dirname "${BASH_SOURCE}")/data/LaunchDaemons" >'/dev/null'
  for job in jp.imoz.*; do
    if [ -f "${daemons_directory}/${job}" ]; then
      rm "${daemons_directory}/${job}"
    fi
    if [ -f "${job}" ]; then
      cat "${job}" > "${daemons_directory}/${job}"
      chmod 644 "${daemons_directory}/${job}"
    fi
  done
  popd >/dev/null
  # Reload launch daemons.
  pushd "${daemons_directory}" >'/dev/null'
  for job in jp.imoz.*; do
    if [ -f "${job}" ]; then
      launchctl load "${job}"
    fi
  done
  popd >'/dev/null'
}

imos-install::darwin() {
  if [ ! -L "${IMOS_STORAGE}" -a ! -a "${IMOS_STORAGE}" ]; then
    local arceus="${IMOS_ROOT}/Volumes/Arceus"
    if [ ! -d "${arceus}" ]; then
      LOG FATAL "Arceus is not found: ${arceus}"
    fi
    ln -s "${arceus}" "${IMOS_STORAGE}"
  fi
  LOG INFO 'Preparing user files...'
  pushd "${IMOS_USERS}" >/dev/null
  local user=''
  for user in *; do
    case "${user}" in
      Guest|Shared|provision|ninetan) :;;
      *)
        local owner="$(imos-stat --format='%u:%g' "${user}")"
        local storage_home="${IMOS_STORAGE}/home/${user}"
        mkdir -p "${storage_home}"
        chown "${owner}" "${storage_home}"
        chmod 755 "${storage_home}"
        local directories=(
            '.dropbox' 'Desktop' 'Documents' 'Downloads' 'Dropbox'
            'Movies' 'Music' 'Pictures')
        local directory=''
        for directory in "${directories[@]}"; do
          backup_and_move "${user}/${directory}" "${storage_home}/${directory}"
        done
        local files=('.bash_history')
        local file=''
        for file in "${files[@]}"; do
          backup_and_move "${user}/${file}" "${storage_home}/${file}"
        done
        backup_and_move "${user}/Library/Caches" \
                        "${IMOS_STORAGE}/cache/Users/${user}/Library/Caches"
    esac
  done
  popd >/dev/null
  backup_and_move "${IMOS_ROOT}/var/vm" "${IMOS_STORAGE}/cache/var/vm"
  backup_and_move "${IMOS_ROOT}/Library/Caches" \
                  "${IMOS_STORAGE}/cache/Library/Caches"
  register_launchdaemons
}

imos-install::linux() {
  # There is nothing to do for linux.
  :
}

main() {
  check
  "imos-install::$(sub::strtolower "${UNAME}")"
}

if [ "${#}" -eq 0 ]; then
  main
else
  LOG FATAL "imos-install requires no arguments."
fi
